
import chromadb 
from tqdm import tqdm
import warnings
warnings.filterwarnings("ignore")

import llm 
from database import database_utils
from youtube_utils import get_video_ids, get_video_transcript
from chroma_utils import chroma_embedding_wrapper 

if __name__ == '__main__':
    print("Hey Welcome to Talk to Youtuber")
    youtuber = input("Enter the name of the youtuber you want to talk to: ")
    print(f"Downloading data for {youtuber}...")

    # Make the SQLITE table connection 
    conn = database_utils.create_connection(db_name = './database/talk_to_youtuber_db.sqlite')

    # create the videos table 
    database_utils.create_table(conn)

    # Start downloading the video ids
    get_video_ids.get_videos(youtuber, connection = conn)

    # # Download all their transcripts 
    all_videos = database_utils.get_videos_by_channel(conn, channel_name = youtuber)

    # Write in transcripts 
    get_video_transcript.get_transcripts_and_add_to_db(youtuber, connection = conn)

    # Start chroma client 
    # Create a new chroma/directory to from chroma data 
    client = chromadb.PersistentClient(path="chroma/")

    # Chroma collection 
    try:
        collection = client.create_collection(name="video_transcript_embeddings"
                                            ,metadata={"hnsw:space": "cosine"}
                                            ,embedding_function = chroma_embedding_wrapper.ChromaEmbeddingWrapper())
    except chromadb.db.base.UniqueConstraintError:
        collection = client.get_collection(name="video_transcript_embeddings"
                                           ,embedding_function = chroma_embedding_wrapper.ChromaEmbeddingWrapper())

    # Add the documents to the collection along with their ids 
    # Embeddings will be generated by chromadb using OpenAI
    print("Adding video transcripts to the Vector Database There will be embedding, so this will take a while...")
    collection.add(
        ids = [video_data[1] for video_data in all_videos],
        documents = [str(video_data[2]) + ' ' + str(video_data[3]) for video_data in all_videos]
    )
    print("Done! You can now talk to the youtuber by entering your query.")

    # TODO 
    # Add in the chat with RAG 